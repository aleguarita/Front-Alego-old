// =============================================================================
// MIXINS
// =============================================================================

// =============================================================================
// Framework da Assembleia Legislativa
// Autor: Alessandro Guarita
// -----------------------------------------------------------------------------
// mixins.scss
// Criado em: 13/01/2015
// Última alteração: 11/04/2016
// -----------------------------------------------------------------------------
// Este arquivo agrupa todos os mixins utilizado pelo sistema que já não façam
// parte de algum arquivo específico (por exemplo, o arquivo de grid tem um
// mixin para a criação de grid).
//
// Acrescente novos mixins sempre no final e com explicação do que fazem e
// deixe um comentário explicado para quê serve, como funciona e como usar
// IMPORTANTE: este comentário deve sempre começar com // e não /*
// -----------------------------------------------------------------------------
// Changelog
// 11/04/2016 | Criação dos mixins menu e submenu
// 22/03/2016 | Mixin lista-oculta foi alterado para item-checado e agora aceita
// 							colocar qualquer seletor (e não mais apenas classe), além da
// 							formatação especial para o item selecionado (display: none) para
// 							antigas listas
// 03/03/2016 | Atualizado mixin grupo-flex para ser responsivo
// 12/02/2016 | Aperfeiçoado o mixin media-tipo para inclusão de tamanho maior
// 03/02/2016 | Removido o mixin link-bloco e acrescentado como opção no mixin
// 							link existente em config/_tipografia.scss
// 18/01/2016 | Transferindo placeholders para mixins
// 							http://www.sitepoint.com/avoid-sass-extend/
// 							* mixin display-flex agora inclui valor de largura
// 							* clearfix
// 							* lista
// 							* link-bloco
// 20/11/2015 | Inclusão do mixin de ocultar lista
// 06/11/2015 | Alteração no mixin de centralizar caixa
// 23/10/2015 | Acrescentado mixin de grupo flex
// 21/10/2015 | Acrescentado mixin de texto selecionado
// 14/10/2015 | Acrescentado mixin de centralizar caixa sem flexbox.
// 13/10/2015 | Eliminados mixins redundantes com os do bourbon.
// 						  Importação de arquivo de mixins separado para o sistema
// 06/10/2015 | Aplicação do bourbon no sistema.
// ??/??/2015 | Criado mixins para flexbox
// ??/??/2015 | Incluído criação de prefixos.
// 13/01/2015 | Criado arquivo básico
// =============================================================================

// =============================================================================
// PREFIXO
// -----------------------------------------------------------------------------
// Acrescenta prefixo de browser no CSS3.
// Fonte: http://css-tricks.com/snippets/sass/mixin-prefix-properties/
// -----------------------------------------------------------------------------
// Como usar:
// Por fazer uso de mapas, as $declaracoes devem aparecer dentro de parênteses
// separados por vírgula. Os prefixos não precisam dessa divisão.
// Exemplo:
// .seletor {
// 	@include prefixo((column-count: 3, column-row: 1.5em), webkit moz);
// }
// Para melhorar a leitura, separe com ENTER
// .seletor {
// 	@include prefixo((
// 		column-count: 3,
// 		column-row: 1.5em),
// 	webkit moz);
// }
// O ideal é usar este mixin dentro de outros, ao invés de usar direto no CSS.
// Desta forma, quando acontecer de cair algum prefixo, só precisa alterar em
// Um lugar.
// =============================================================================
@mixin prefixo($declaracoes, $prefixos: ()) {
	@each $propriedade, $valor in $declaracoes {
		@each $prefixo in $prefixos {
			#{'-' + $prefixo + '-' + $propriedade}: $valor;
		}
		// Exibição padrão, sem prefixo
		#{$propriedade}: $valor;
	}
}

// =============================================================================
// MEDIA-QUERY
// -----------------------------------------------------------------------------
// Para determinar propriedades responsivas, utilizando mobile-first como padrão.
// -----------------------------------------------------------------------------
// Como usar:
// Este mixin faz uso da função breakpoint (ver o arquivo). Basta digitar o
// mixin e chamar o breakpoint pré-estabelecido lá.
// .seletor {
// 	@include media-tipo(medio) {
// 		insira aqui a configuração
// 	}
// }
// Se preferir colocar medida como no máximo aquela largura, use:
// .seletor {
// 	@include media-tipo(medio, max) {
// 		insira aqui a configuração
// 	}
// }
// =============================================================================
@mixin media-tipo($breakpoint, $medida: min) {
	@media (#{$medida}-width: breakpoint($breakpoint)) {
		@content;
	}
}

// =============================================================================
// PLACEHOLDER
// -----------------------------------------------------------------------------
// Faz o placeholder de formulários.
// Não estou usado o @prefixo acima pois a forma de usar prefixo é diferente
// -----------------------------------------------------------------------------
// Como usar:
// .seletor {
// 	@include placeholder {
// 		formatação
// 	}
// }
// =============================================================================
@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;
	}
	&::-moz-placeholder {  /* Firefox 19+ */
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
}

// =============================================================================
// CLEARFIX
//	----------------------------------------------------------------------------
//	Use no elemento pai de elementos que usem float.
// =============================================================================
@mixin clearfix {
	content: "";
	display: table;
	clear: both;
}

// =============================================================================
// PREFIXOS MAIS COMUNS DE CSS3
// -----------------------------------------------------------------------------
// Aplica os prefixos de CSS
// =============================================================================
@mixin transform($transform) {
	@include prefixo((transform: $transform), webkit);
}
@mixin transform-origin($origem) {
	@include prefixo((transform-origin: $origem), webkit);
}

// =============================================================================
// FLEXBOX
// -----------------------------------------------------------------------------
// Inclui os prefixos para o funcionamento do Flexbox
// Os valores padrão já pensa no uso mais comum (e é por isso que prefiro isso
// ao bourbon).
// -----------------------------------------------------------------------------
// Como usar:
// .classe {
// 	@include flex-direction(column);
// }
// =============================================================================
// No flex container
@mixin display-flex($largura: null) {
	display: -webkit-flex;	// Safari
	display:  -ms-flexbox;	// IE 10
	display:         flex;
	@if $largura != null {
		width: $largura;
	}
}
@mixin flex-direction($flex-direction: column) {
	@include prefixo((flex-direction: $flex-direction), webkit);
}
@mixin flex-wrap($wrap: wrap) {
	@include prefixo((flex-wrap: $wrap), webkit);
}
@mixin flex-flow($flex-direction: column, $flex-wrap: wrap) {
	@include prefixo((flex-flow: $flex-direction $flex-wrap), webkit);
}
@mixin justify-content($justify-content: center) {
	@include prefixo((justify-content: $justify-content), webkit);
}
@mixin align-items($align-items: center) {
	@include prefixo((align-items: $align-items), webkit);
}
@mixin align-content($align-content: center) {
	@include prefixo((align-content: $align-content), webkit);
}

//	No flex-item
@mixin order($order: auto) {
	@include prefixo((order: $order), webkit);
}
@mixin flex-grow($flex-grow: 1) {
	@include prefixo((flex-grow: $flex-grow), webkit);
}
@mixin flex-shrink($flex-shrink: 1) {
	@include prefixo((flex-shrink: $flex-shrink), webkit);
}
@mixin flex-basis($flex-basis: 100%) {
	@include prefixo((flex-basis: $flex-basis), webkit);
}
@mixin flex($flex: 1) {
	@include prefixo((flex: $flex), webkit);
}
@mixin align-self($align-self: auto) {
	@include prefixo((align-self: $align-self), webkit);
}

// =============================================================================
// CENTRALIZADOR DE CAIXA
// -----------------------------------------------------------------------------
// Centraliza uma caixa em valor absoluto. Ótimo para login. A vantagem é que
// por não usar de flexbox, o HTML fica mais limpo. Não precisa usar em modal
// (que está usando flexbox)
// -----------------------------------------------------------------------------
// Os valores de $largura e $altura são opcionais. Se não utilizados a caixa
// vai crescer conforme o conteúdo
// =============================================================================
@mixin centraliza-caixa($largura: null, $altura: null) {
	@include transform(translate(-50%, -50%));
	width: $largura;
	height: $altura;
	position: absolute;
	top: 50%;
	left: 50%;
	max-width: 100%;
	max-height: 100%;
}

// =============================================================================
// GRUPO FLEX
// -----------------------------------------------------------------------------
// Cria um grupo de Flex-box de mesmo tamanho, igualmente distribuido.
// É possível fazer responsivo (decidindo quantidade de caixa por medida de tela)
// Aceita inserir configuração do elemento filho
// -----------------------------------------------------------------------------
// ESTE MIXIN FAZ USO DE OUTRO MIXIN E TAMBÉM DE FUNÇÕES CRIADAS PARA ELE
// -----------------------------------------------------------------------------
// Variáveis e o que significam:
//  $qtd
//     Uma mapa que determina a quantidade de caixas por linha. VALOR OBRIGATÓRIO
// 		 POR SER MAPA, DEVE APARECER ENTRE PARÊNTESES, se tiver mais de um valor
//  $margem
//     Determina o espaço entre os elementos. Por padrão está 10px (convertido
//     em rem).
//     O valor pode ser 0 (sem margem)
//  ESTE MIXIN ACEITA COLOCAR FORMATAÇÃO ESPECÍFICA PARA O ELEMENTO FILHO
// -----------------------------------------------------------------------------
// Exemplos de uso:
// .classe {
//   @include grupo-flex(5); -> coloca 5 caixas por linha, para todos os elementos
//   @include grupo-flex(5, 20px); -> 5 caixas/linha com margem de 20px
//   @include grupo-flex((1, 5)); -> coloca 5 caixas por linha, mas 1 por linha
// 			em smartphone
// 	 @include grupo-flex((1, 5), rem(20)); -> coloca 5 caixas por linha, mas
// 			1 por linha em smartphone e com margem de 20px (convertidos para REM)
// 	 @include grupo-flex((1, 2, 3, 4)); -> coloca 1 caixa por linha em smartphone
// 			2 por linha em smartphone deitado (ou tablet em pé), 3 por linha em
// 			tablet, 4 por linha em desktop
// }
// =============================================================================
// GRUPO FLEX | FUNCÕES
// -----------------------------------------------------------------------------
@function grupo-flex__largura($qtd, $margem) {
  // largura de cada elemento SEM a margem
  $largura-porcentagem: 100% / $qtd;
  // calcula a quantidade total de margens aplicadas
  // depois divide pela quantidade  de elementos
  $total-margem: $margem * ($qtd - 1);
  $medida-margem: $total-margem / $qtd;
  @return if($largura-porcentagem != 100%, calc(#{$largura-porcentagem} - #{$medida-margem}), 100%);
}
@function grupo-flex__margem($qtd, $margem) {
  @return if($qtd == 1, 0 0 $margem, 0 $margem $margem 0);
}
// -----------------------------------------------------------------------------
// GRUPO FLEX | MIXIN PARA USO INTERNO
// -----------------------------------------------------------------------------
@mixin grupo-flex__conteudo($qtd, $margem) {
  margin: grupo-flex__margem($qtd, $margem);
  width: grupo-flex__largura($qtd, $margem);
  // verifica se a quantidade é maior que 1, se for, limpa a margem;
  @if $qtd > 1 {
    &:nth-child(#{$qtd}n) {
      margin-right: 0;
    }
  }
}
// -----------------------------------------------------------------------------
// GRUPO FLEX | MIXIN FINAL
// -----------------------------------------------------------------------------
@mixin grupo-flex($qtd: (), $margem: $calha * 2) {
  // cálculos
  // ---------------------------------------------------------------------------
  $qtd-total: length($qtd);
  $qtd-p: nth($qtd, 1);
  $qtd-m: if($qtd-total >= 2, nth($qtd, 2), null);
  $qtd-g: if($qtd-total >= 3, nth($qtd, 3), null);
  $qtd-xg: if($qtd-total >= 4, nth($qtd, 4), null);

  // regras do elemento pai
  // ---------------------------------------------------------------------------
  @include display-flex;
  @include flex-wrap;
  @include align-content(space-between);

	// regras dos elementos filho
  // ---------------------------------------------------------------------------
  > * {
    @content;
    // verifica se só tem um valor
    @if $qtd-m == null {
      @include grupo-flex__conteudo($qtd-p, $margem);
    }
    // verifica se a tela maior é a média
    @else if $qtd-g == null {
      @include media-tipo(pequeno, max) {
        @include grupo-flex__conteudo($qtd-p, $margem);
      }
      @include media-tipo(pequeno) {
        @include grupo-flex__conteudo($qtd-m, $margem);
      }
    }
    // verifica se a tela maior é a grande
    @else if $qtd-xg == null {
      // verifica se o valor pequeno e médio são iguais
      @if $qtd-p == $qtd-m {
        @include media-tipo(medio, max) {
          @include grupo-flex__conteudo($qtd-p, $margem);
        }
        @include media-tipo(medio) {
          @include grupo-flex__conteudo($qtd-g, $margem);
        }
      }
      // qtd peq e médio são diferentes
      @else {
        @include media-tipo(pequeno, max) {
          @include grupo-flex__conteudo($qtd-p, $margem);
        }
        @media (min-width: breakpoint(pequeno)) and (max-width: breakpoint(medio)) {
          @include grupo-flex__conteudo($qtd-m, $margem);
        }
        @include media-tipo(medio) {
          @include grupo-flex__conteudo($qtd-g, $margem);
        }
      }
    }
    // se for valor extra grande
    @else {
      // se o tamanho pequeno, médio e grande são iguais
      @if $qtd-p == $qtd-m and $qtd-m == $qtd-g {
        @include media-tipo(grande, max) {
          @include grupo-flex__conteudo($qtd-p, $margem);
        }
        @include media-tipo(grande) {
          @include grupo-flex__conteudo($qtd-xg, $margem);
        }
      }
      // se o tamanho pequeno e médio são iguais
      @if $qtd-p == $qtd-m and $qtd-m != $qtd-g {
        @include media-tipo(medio, max) {
          @include grupo-flex__conteudo($qtd-p, $margem);
        }
        @media (min-width: breakpoint(medio)) and (max-width: breakpoint(grande)) {
          @include grupo-flex__conteudo($qtd-g, $margem);
        }
        @include media-tipo(grande) {
          @include grupo-flex__conteudo($qtd-xg, $margem);
        }
      }
      // se o tamanho pequeno e médio são diferentes e médio e grande são iguais
      @if $qtd-p != $qtd-m and $qtd-m == $qtd-g {
        @include media-tipo(pequeno, max) {
          @include grupo-flex__conteudo($qtd-p, $margem);
        }
        @media (min-width: breakpoint(pequeno)) and (max-width: breakpoint(grande)) {
          @include grupo-flex__conteudo($qtd-g, $margem);
        }
        @include media-tipo(grande) {
          @include grupo-flex__conteudo($qtd-xg, $margem);
        }
      }
      // todos são diferentes
      @else {
        @include media-tipo(pequeno, max) {
          @include grupo-flex__conteudo($qtd-p, $margem);
        }
        @media (min-width: breakpoint(pequeno)) and (max-width: breakpoint(medio)) {
          @include grupo-flex__conteudo($qtd-m, $margem);
        }
        @media (min-width: breakpoint(medio)) and (max-width: breakpoint(grande)) {
          @include grupo-flex__conteudo($qtd-g, $margem);
        }
        @include media-tipo(grande) {
          @include grupo-flex__conteudo($qtd-xg, $margem);
        }
      }
    }
  }
}
// =============================================================================
// TEXTO SELECIONADO
// -----------------------------------------------------------------------------
// Este mixin serve para alterar o padrão do texto selecionado no browser
// (quando o usuário seleciona para copiar e colar, por exemplo)
// =============================================================================
@mixin texto-selecionado($fundo: cor(fundo, escuro), $texto: cor(texto, claro)) {
	&::selection {
		background-color: $fundo;
		color: $texto;
	}
	&::-moz-selection {
		background-color: $fundo;
		color: $texto;
	}
}

// =============================================================================
// LISTAS SEM MARCADORES
// -----------------------------------------------------------------------------
// Formata listas para serem sem marcadores. Pode exibir como flex ou não
// =============================================================================
@mixin lista-sem-marcador($flex: null) {
	list-style: none;
	padding-left: 0;
	@if $flex != null {
		@include display-flex;
	}
}

// =============================================================================
// ITEM CHECADO
// -----------------------------------------------------------------------------
// Para criar listas que abrem e fecham e ainda exibem o título ou para criar
// caixas que mudam o estilo quando selecionada.
// O HTML deve incluir um checkbox no mesmo nível hierárquico do conteúdo que
// será formatado. Note que o checkbox será invisível.
// O conteúdo deve aparecer depois do checkbox.
// Exte mixin deverá ser incluído dentro do seletor do checkbox.
// -----------------------------------------------------------------------------
// $seletor: o seletor que será usada para o conteúdo. Escreva entre aspas.
// Ex.: ".classe"
// =============================================================================
@mixin item-checado($seletor) {
  display: none;
  &:checked ~ #{$seletor} {
    @content;
  }
}

// =============================================================================
// MENU E SUBMENU
// -----------------------------------------------------------------------------
// Cria a estrutura básica do menu e do submenu. Evidentemente, sem formatação
// -----------------------------------------------------------------------------
// $tipo: se o menu é vertical (padrão) ou horizontal
// =============================================================================
@mixin menu($tipo: vertical) {
	@if $tipo == horizontal {
		@include lista-sem-marcador(flex);
	} @else {
		@include lista-sem-marcador;
	}
  margin: 0;
  z-index: z(menu);
}
@mixin submenu($tipo: vertical) {
  @include lista-sem-marcador;
  position: absolute;
  display: none;
  margin: 0;
  z-index: z(submenu);
  @if $tipo != horizontal {
    top: 0;
    transform: translateX(100%);
    width: 100%;
  }
  a:hover ~ &, &:hover {
    display: block;
  }
}
